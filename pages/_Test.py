import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from sqlalchemy import create_engine
from components.sidebar import hide_sidebar_nav, create_sidebar

# ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô Sidebar Navigation
hide_sidebar_nav()

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar Menu
create_sidebar()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö PostgreSQL
db_config = {
    "dbname": "aqi_database",
    "user": "airflow",
    "password": "airflow",
    "host": "localhost",
    "port": "30524"
}

engine = create_engine(f"postgresql://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['dbname']}")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database
data = pd.read_sql("SELECT * FROM air_quality_raw", con=engine)

data.columns = data.columns.str.lower()  # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
data['timestamp'] = pd.to_datetime(data['timestamp'])

# Sidebar Filters
st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
selected_city = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(data["city"].unique()))
selected_state = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏£‡∏±‡∏ê", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(data["state"].unique()))
selected_region = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(data["region"].unique()))

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if selected_city != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    data = data[data["city"] == selected_city]
if selected_state != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    data = data[data["state"] == selected_state]
if selected_region != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    data = data[data["region"] == selected_region]

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Choropleth Map (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
st.subheader("üó∫ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
fig_map = px.scatter_mapbox(data, lat="latitude", lon="longitude", color="aqius",
                            size="aqicn", hover_data=["city", "state", "aqius"],
                            zoom=5, mapbox_style="carto-positron")
st.plotly_chart(fig_map)

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ AQI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á
st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö AQI ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á")
aq_bar_chart = px.bar(data.groupby("city")["aqius"].mean().reset_index(),
                      x="city", y="aqius", color="aqius",
                      title="‡∏Ñ‡πà‡∏≤ AQI ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
                      labels={"aqius": "‡∏Ñ‡πà‡∏≤ AQI (US)"}, height=500)
st.plotly_chart(aq_bar_chart)

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° AQI ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (‡πÉ‡∏ä‡πâ Dual Y-axis)
st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° AQI ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥")
fig = go.Figure()

fig.add_trace(go.Scatter(x=data["timestamp"], y=data["aqius"],
                         mode='lines', name='AQI (US)',
                         line=dict(color='red')))

fig.add_trace(go.Scatter(x=data["timestamp"], y=data["temperature"],
                         mode='lines', name='Temperature (¬∞C)',
                         line=dict(color='blue'), yaxis='y2'))

fig.update_layout(
    title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° AQI ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥",
    xaxis_title="timestamp",
    yaxis=dict(title="AQI (US)", tickfont=dict(color="red")),
    yaxis2=dict(title="Temperature (¬∞C)", tickfont=dict(color="blue"),
                overlaying='y', side='right')
)

st.plotly_chart(fig)
