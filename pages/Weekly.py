import platform
import streamlit as st
import pandas as pd
import numpy as np
from components.sidebar import *
from services.data_loader import *
from utils.helpers import *
import plotly.express as px

st.set_page_config(
    page_title="Weekly AQI",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded" # "expanded", "collapsed", or "auto"
)

# ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô Sidebar Navigation
hide_sidebar_nav()

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar Menu
create_sidebar()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö PostgreSQL ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ file backup
data = pd.DataFrame
if connection_str("aqi_database")["status"] == "ok":
    conn_str = str(connection_str("aqi_database")["data"])
    print(conn_str)
    data = fetch_data(conn_str, str("SELECT * FROM vw_air_quality_latest"))
elif platform.system() == "Windows":
    print("ü™ü Running on Windows")
    data = pd.read_csv("backup_data\\air_quality_raw_202503202336.csv")
    # Load datasets
    dim_location = pd.read_csv("backup_data\\dim_location_202503292133.csv")
    dim_time = pd.read_csv("backup_data\\dim_time_202503292134.csv")
    fact_air = pd.read_csv("backup_data\\fact_air_quality_202503292134.csv")
else:
    data = pd.read_csv("backup_data/air_quality_raw_202503202336.csv")
    # Load datasets
    dim_location = pd.read_csv("backup_data/dim_location_202503292133.csv")
    dim_time = pd.read_csv("backup_data/dim_time_202503292134.csv")
    fact_air = pd.read_csv("backup_data/fact_air_quality_202503292134.csv")

st.title("Dashboard AQI Weekly üìä")

# Sidebar Filters
st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ‚úÖ 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Region
region_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(data["region"].dropna().unique())
selected_region = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", region_options)

# ‚úÖ 2. State Dropdown (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Region -> ‡∏õ‡∏¥‡∏î Dropdown)
state_placeholder = st.sidebar.empty()

if selected_region == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    selected_state = state_placeholder.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", ["‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô"], disabled=True)
else:
    state_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(data[data["region"] == selected_region]["state"].dropna().unique())
    selected_state = state_placeholder.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", state_options)

# ‚úÖ 3. City Dropdown (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å State -> ‡∏õ‡∏¥‡∏î Dropdown)
city_placeholder = st.sidebar.empty()

if selected_state == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" or selected_state == "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô":
    selected_city = city_placeholder.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï", ["‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô"], disabled=True)
else:
    city_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(data[data["state"] == selected_state]["city"].dropna().unique())
    selected_city = city_placeholder.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï", city_options)

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
st.sidebar.write(f"üåç Region: {selected_region}")
st.sidebar.write(f"üèôÔ∏è State: {selected_state}")
st.sidebar.write(f"üèòÔ∏è City: {selected_city}")

# Join Fact Table ‡∏Å‡∏±‡∏ö Location Table
dwh_data = pd.merge(fact_air, dim_location, on="location_id", how="left")
dwh_data["datetime"] = pd.to_datetime(dwh_data["time_id"].astype(str), format="%Y%m%d%H")
print(dwh_data.head(10))

fact_air["date_str"] = fact_air["time_id"].astype(str).str[:8]  # ‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ YYYYMMDD
fact_air["date"] = pd.to_datetime(fact_air["date_str"], format="%Y%m%d").dt.date

latest_date = fact_air["date"].max()
str_latest_date = latest_date.strftime('%d %b %Y')

# ‚úÖ Filter latest date by sidebar
data_latest_day = dwh_data[dwh_data["datetime"].dt.date == latest_date]

filtered_hourly = data_latest_day.copy()
if selected_region != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_hourly = filtered_hourly[filtered_hourly["region"] == selected_region]
if selected_state != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and selected_state != "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô":
    filtered_hourly = filtered_hourly[filtered_hourly["state"] == selected_state]
if selected_city != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and selected_city != "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô":
    filtered_hourly = filtered_hourly[filtered_hourly["city"] == selected_city]

# ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
aqi_line_data = filtered_hourly[["datetime", "city", "aqius", "aqicn"]].sort_values("datetime")
temp_line_data = filtered_hourly[["datetime", "city", "temperature"]].sort_values("datetime")
humid_line_data = filtered_hourly[["datetime", "city", "humidity"]].sort_values("datetime")

# ‚úÖ ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
chart_location = get_chart_location_label(selected_region, selected_state, selected_city)

# ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á
if selected_city != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and selected_city != "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô":
    fig_line = px.line(
        aqi_line_data,
        x="datetime",
        y="aqius",
        title=f"AQI (US) ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"aqius": "‡∏Ñ‡πà‡∏≤ AQI (US)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    fig_temp = px.line(
        temp_line_data,
        x="datetime",
        y="temperature",
        title=f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"temperature": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    fig_humid = px.line(
        humid_line_data,
        x="datetime",
        y="humidity",
        title=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%) ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"humidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )

# ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
elif selected_state != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and selected_state != "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô":
    avg_hourly = aqi_line_data.groupby("datetime")[["aqius"]].mean().reset_index()
    fig_line = px.line(
        avg_hourly,
        x="datetime",
        y="aqius",
        title=f"AQI (US) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"aqius": "‡∏Ñ‡πà‡∏≤ AQI (US)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_temp = temp_line_data.groupby("datetime")[["temperature"]].mean().reset_index()
    fig_temp = px.line(
        avg_temp,
        x="datetime",
        y="temperature",
        title=f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"temperature": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_humid = humid_line_data.groupby("datetime")[["humidity"]].mean().reset_index()
    fig_humid = px.line(
        avg_humid,
        x="datetime",
        y="humidity",
        title=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"humidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )

# ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ 3: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
elif selected_region != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    avg_hourly = aqi_line_data.groupby("datetime")[["aqius"]].mean().reset_index()
    fig_line = px.line(
        avg_hourly,
        x="datetime",
        y="aqius",
        title=f"AQI (US) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"aqius": "‡∏Ñ‡πà‡∏≤ AQI (US)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_temp = temp_line_data.groupby("datetime")[["temperature"]].mean().reset_index()
    fig_temp = px.line(
        avg_temp,
        x="datetime",
        y="temperature",
        title=f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"temperature": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_humid = humid_line_data.groupby("datetime")[["humidity"]].mean().reset_index()
    fig_humid = px.line(
        avg_humid,
        x="datetime",
        y="humidity",
        title=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"humidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )

# ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ 4: ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ (‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
else:
    avg_hourly = aqi_line_data.groupby("datetime")[["aqius"]].mean().reset_index()
    fig_line = px.line(
        avg_hourly,
        x="datetime",
        y="aqius",
        title=f"AQI (US) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"aqius": "‡∏Ñ‡πà‡∏≤ AQI (US)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_temp = temp_line_data.groupby("datetime")[["temperature"]].mean().reset_index()
    fig_temp = px.line(
        avg_temp,
        x="datetime",
        y="temperature",
        title=f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"temperature": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )
    avg_humid = humid_line_data.groupby("datetime")[["humidity"]].mean().reset_index()
    fig_humid = px.line(
        avg_humid,
        x="datetime",
        y="humidity",
        title=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî {chart_location} ({latest_date.strftime('%d %b %Y')})",
        labels={"humidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", "datetime": "‡πÄ‡∏ß‡∏•‡∏≤"},
        markers=True
    )


# ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö layout ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (optional)
fig_line.update_layout(
    xaxis_tickformat="%H:%M",
    yaxis_tickformat=".2f",
    hovermode="x unified"
)

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
st.plotly_chart(fig_line, use_container_width=True)
st.plotly_chart(fig_temp, use_container_width=True)
st.plotly_chart(fig_humid, use_container_width=True)

# ‚úÖ Select columns and sort
hourly_view = filtered_hourly[[
    "datetime", "region", "state", "city", "aqius", "aqicn", "mainus", "maincn", "temperature", "humidity"
]].sort_values(by="datetime", ascending=False)

# ‚úÖ Show table
with st.expander("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AQI ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"):
    st.dataframe(
        hourly_view.style.format({
            "aqius": "{:.3f}",
            "aqicn": "{:.3f}"
        }),
        use_container_width=True
    )
